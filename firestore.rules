rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function hasActiveShare(doctorId, patientId) {
      let shareId = doctorId + "_" + patientId;
      return exists(/databases/$(database)/documents/shared_profiles/$(shareId)) &&
             get(/databases/$(database)/documents/shared_profiles/$(shareId)).data.status == "active" &&
             get(/databases/$(database)/documents/shared_profiles/$(shareId)).data.doctorId == doctorId;
    }

    function canAccessVectors(targetUserId) {
      return request.auth != null && (
        request.auth.uid == targetUserId ||
        hasActiveShare(request.auth.uid, targetUserId)
      );
    }

    // FHIR Collections - Allow read/write for FHIR data migration and access
    match /fhir/{document=**} {
      allow read, write: if request.auth != null;
    }

    // (Optional) vector chunk validation removed to avoid false denials during write

    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && resource.data.role == "doctor";
    }

    match /userProfile/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      allow read: if request.auth != null &&
        exists(/databases/$(database)/documents/shared_profiles/$(request.auth.uid + '_' + userId)) &&
        get(/databases/$(database)/documents/shared_profiles/$(request.auth.uid + '_' + userId)).data.status == 'active' &&
        get(/databases/$(database)/documents/shared_profiles/$(request.auth.uid + '_' + userId)).data.doctorId == request.auth.uid;
    }

    match /shared_profiles/{shareId} {
      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.patientId || request.auth.uid == resource.data.doctorId) &&
        shareId == resource.data.doctorId + '_' + resource.data.patientId;

      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.patientId &&
        shareId == request.resource.data.doctorId + '_' + request.resource.data.patientId;

      allow update: if request.auth != null &&
        request.auth.uid == resource.data.patientId &&
        shareId == request.resource.data.doctorId + '_' + resource.data.patientId;

      allow list: if request.auth != null;
    }

    match /medicalRecords/{recordId} {
      allow read: if request.auth != null && (
        resource.data.patientId == request.auth.uid ||
        (resource.data.doctorId == request.auth.uid &&
         hasActiveShare(request.auth.uid, resource.data.patientId))
      );

      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.doctorId &&
        request.auth.uid == request.resource.data.createdBy &&
        request.resource.data.patientId != null &&
        hasActiveShare(request.auth.uid, request.resource.data.patientId) &&
        request.resource.data.isActive == true &&
        request.resource.data.shareRecordId == (request.auth.uid + "_" + request.resource.data.patientId) &&
        request.resource.data.visitDate != null &&
        request.resource.data.createdAt != null &&
        request.resource.data.lastModifiedAt != null;

      allow update: if request.auth != null &&
        request.auth.uid == request.data.createdBy &&
        request.auth.uid == request.resource.data.doctorId &&
        hasActiveShare(request.auth.uid, resource.data.patientId) &&
        request.resource.data.patientId == resource.data.patientId &&
        request.resource.data.doctorId == resource.data.doctorId &&
        request.resource.data.createdBy == request.resource.data.createdBy &&
        request.resource.data.createdAt == request.resource.data.createdAt &&
        request.resource.data.shareRecordId == request.resource.data.shareRecordId &&
        request.resource.data.lastModifiedAt != resource.data.lastModifiedAt &&
        (
          (request.resource.data.symptoms != null ||
           request.resource.data.diagnosis != null ||
           request.resource.data.medicines != null ||
           request.resource.data.prescribedTests != null ||
           request.resource.data.followUpNotes != null ||
           request.resource.data.visitDate != null) ||
          request.resource.data.isActive == false
        );

      allow delete: if false;
    }

    match /vectors/{userId}/chunks/{chunkId} {
      allow read, list: if canAccessVectors(userId);
      allow create, update: if canAccessVectors(userId);
      allow delete: if canAccessVectors(userId);
    }

    match /{document=**} {
      allow read: if request.auth != null;
    }
  }
}